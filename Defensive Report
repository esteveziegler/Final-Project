# Blue Team: Summary of Operations

## Table of Contents
- Network Topology
- Description of Targets
- Monitoring the Targets
- Patterns of Traffic & Behavior
- Suggestions for Going Further

### Network Topology
The following machines were identified on the network:
- Kali
  - **Operating System**: Kali Linux
  - **Purpose**: Attacking Machine
  - **IP Address**: 192.168.1.90
- Target 1
  - **Operating System**: Debian Linux
  - **Purpose**: Defending Machine
  - **IP Address**: 192.168.1.110
- Etc.

### Description of Targets
The target of this attack was: `Target 1` 192.168.1.110.

Target 1 is an Apache web server and has SSH enabled, so ports 80 and 22 are possible ports of entry for attackers. As such, the following alerts have been 
implemented: HTTP request size monitor, CPU usage monitor, Excessive HTTP errors

### Monitoring the Targets

Traffic to these services should be carefully monitored. To this end, we have implemented the alerts below:

#### HTTP Request Size

Alert 1 is implemented as follows:
  - **Metric**: HTTP Requests
  - **Threshold**: 3500
  - **Vulnerability Mitigated**: Code injection in HTTP Requests (XSS)/DDOS
  - **Reliability**: High

#### Excessive HTTP Errors
Alert 2 is implemented as follows:
  - **Metric**: HTTP Error Responses
  - **Threshold**: 400
  - **Vulnerability Mitigated**: Brute Force
  - **Reliability**: Medium

#### CPU Usage Monitor
Alert 3 is implemented as follows:
  - **Metric**: CPU usage
  - **Threshold**: .5 / 50%
  - **Vulnerability Mitigated**: Malicious software
  - **Reliability**: High


### Suggestions for Going Further (Optional)
The logs and alerts generated during the assessment suggest that this network is susceptible to several active threats, identified by the alerts above. 
In addition to watching for occurrences of such threats, the network should be hardened against them. The Blue Team suggests that IT implement the fixes below to protect the network:
- Code injection
  - **Patch**: Sanitize input/input validation on forms
  - **Why It Works**: This can help protect against malicious data anyone attempts to send to the server via the website or application in/across a HTTP request.
- Brute Force
  - **Patch**: Remove WordPress logins from being publicly accessible
  - **Why It Works**: Preventing any user from logging in to "/wp-admin" or "/wp-login.php" would cut down 
                      significantly on the vulnerability of brute force attacks.
- Malicious software
  - **Patch**: Install virus/malware scanning software
  - **Why It Works**: Antiviruses specialize in removal, detection and overall prevention of malicious threats against computers.
